# 1. Базовый образ
# Используем ту же версию Python, что и в вашем старом файле, для совместимости.
FROM python:3.11-slim

# 2. Переменные окружения
# Хорошая практика для работы в Docker
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# 3. Рабочая директория
# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# 4. Установка зависимостей
# Копируем только файл с зависимостями для эффективного кэширования слоев Docker.
# Если requirements.txt не изменится, Docker не будет переустанавливать пакеты при каждой сборке.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 5. Копирование кода приложения
# Копируем все файлы из папки datamatrix-app (текущий контекст сборки)
# в рабочую директорию /app внутри контейнера.
# Теперь в /app будут лежать папка app/, скрипты create_admin.py и т.д.
COPY app/ ./app/

# 6. Открытие порта
# Сообщаем Docker, что контейнер будет слушать этот порт.
# Этот порт должен соответствовать тому, на который Nginx перенаправляет запросы.
EXPOSE 8000

# 7. Команда запуска
# Запускаем приложение с помощью Gunicorn - production-ready веб-сервера.
# --bind 0.0.0.0:8000 - Gunicorn будет принимать соединения на порту 8000 со всех интерфейсов.
# app.main:app - Gunicorn будет искать объект `app` (экземпляр Flask) в файле `main.py` внутри модуля `app`.
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "app.main:create_app()"]